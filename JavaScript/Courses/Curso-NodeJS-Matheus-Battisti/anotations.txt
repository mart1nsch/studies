*** NodeJS ***

** O que é **
  - É uma runtime do JavaScript.
	- Uma biblioteca utilizada por um compilador durante a execução do programa.
	- Possibilita criar softwares em JS no lado do servidor.
	
** O que é NPM **
  - Node Package Manager
  - Gerenciador de pacotes do Node.
	- Podemos baixar bibliotecas de terceiros pelo NPM.
	- Executar determinados scripts do nosso programa.
	- Os módulos externos ficam numa pasta chamada node_modules.
	- Ela deve ser descartável, para cada instalação do projeto baixar todos os pacotes novamente.
	- Encontramos os módulos externos no site: https://www.npmjs.com/
	
** Comandos NPM **
  + Iniciar um projeto:
	  "npm init"
	+ Iniciar um projeto de maneira rápida:
	  "npm init -y"
	+ Instalar um módulo:
	  "npm install $NOME MÓDULO$"
	+ Instalar todos os módulos que estão na package.json:
	  "npm install"
	+ Instalar um módulo como somente para teste, para que este módulo não vá para produção:
	  "npm install --save-dev $NOME MÓDULO$"
	+ Instalar um módulo de forma global, qualquer pasta do computador irá ter acesso:
	  "npm install -g $NOME MÓDULO$"
	+ Atualizar todos os módulos da package.json:
	  "npm update"
	+ Atualizar um módulo em especifico:
	  "npm update $NOME MÓDULO$"
	+ Deletar um pacote:
	  "npm uninstall $NOME MÓDULO$"
	
** Comandos Node **
  + Abrir caixa do node:
	  "node"
	+ Sair:
	  ".exit"
	+ Se ficar preso, pode usar:
	  ".break"
	- Podemos rodar código JavaScript dentro dele, igual ao inspecionar do navegador.
	+ Rodar um arquivo usando o Node:
	  "node $CAMINHO E NOME ARQUIVO$"
	  "node index.js"
	  "node .\index.js"
		
** O que são módulos **
  - São scripts reaproveitáveis.
	- São divididos em 3 categorias:
	  = Internos: Módulos que nós desenvolvemos.
		= Core Modules: Módulos que vem com o NodeJS.
		= Externos: Módulos que instalamos via NPM.
		
** Módulos Internos **
	- São criadas nas pastas do nosso projeto.
	- Precisamos exportar o módulo.
	- Usamos a instrução module.exports.
	+ Um exemplo de método:
	  "module.exports = {
				somar(a, b) {
						return a + b;
		 		}
		 }"
	+ Para importar no outro arquivo, podemos fazer assim:
	  "const { somar } = require('./modulo');
		 console.log(somar(1, 2));"
		
** Export e Import **
  - Funcionalidades mais modernas de importação e exportação.
	- Para funcionar, os arquivos precisam ter a extensão .mjs.
	+ Exportar:
	  "export default $NOME VARIÁVEL, FUNÇÃO, ETC.$;"
	  "export default somar;"
	+ Importar:
	  "import $NOME VARIÁVEL$ from "$CAMINHO ARQUIVO COM MÓDULO$""
	  "import $NOME VARIÁVEL$ from "./modulo.mjs";"
		
** Core Modules **
  - São os módulos que vem prontos dentro do NodeJS.
	- Resolvem alguns problemas como trabalhar com arquivos, servir aplicações, etc.
	- Estes módulos precisam ser importados para poderem ser usados.
	- Exemplos: http (módulo para criar servidores HTTP), path (extrai informações de caminhos de arquivos), fs (leitura e escrita de arquivos), url (módulo para trabalhar com URLs).
		
** Módulos Externos **
  - Podem ser instalados via NPM.
	- Para podermos instalar, temos que iniciar o NPM no nosso projeto com npm init.
	- São salvos na pasta node_modules.
	+ Instalar módulo:
	  "npm install $NOME MÓDULO$"
		
** Importando Módulos **
  - Podemos importar modulos usando o require no JS.
	+ Importar:
	  "const $NOME VARIÁVEL$ = require("$NOME MÓDULO$");"
	  "const fs = require("fs");"
		"const axios = require("axios");"
		
** Módulo FileSystem **
  - Módulo para poder mexer com arquivos dentro do JS.
	+ Importamos ele primeiro:
	  "const fs = require("fs");"
	- Para abrir um arquivo:
	  "fs.readFile("$CAMINHO ARQUIVO$", "utf8", (err, data) => {
		   if (err) {
			   console.log(err);
				 return;
			 }
			 console.log(data);
		 });"
		 
** Ler argumentos de linha de comando **
  - Podemos pegar dentro da lógica do JS, os argumentos passados numa linha de comando chamando o Node.
	+ Exemplo:
	  Chamamos o node assim: "node index.js nome=Martin"
		Dentro do JS, podemos pegar esse argumento assim: "process.argv"
		Então podemos jogar os argumentos numa variável com: "const args = process.argv.slice(2);"
		Para pegar o atributo do nome: "args[0].split("=")[1]"
		
** Ler entrada de dados **
  - Usamos o módulo readline e o módulo question que faz uma pergunta ao usuário.
	- Também podemos usar o módulo inquirer que é mais facil e melhor. Ele usa Promises.
	
** Event Loop **
  - É um recurso da arquitetura do Node.
	- O Node roda uma linha por vez e le o código de cima para baixo.
	- Nos ajuda a evitar problemas de concorrência.
	- Único cuidado que precisamos ter é com bloqueios no fluxo, como loops infinitos.
	
** Event Emitter **
  - Se comporta como os eventos do navegador.
	- Podemos ativar um código em alguns pontos da aplicação.
	- É um core module chamado events.
	- Precisamos instanciar a classe EventEmitter e usarmos seus métodos.
	+ Podemos usar ele assim:
	  "const EventEmitter = require('events');
		 const eventEmitter = new EventEmitter();
		  
		 eventEmitter.on('start', () => {
		 		console.log("Martin");
		 });
		  
		 eventEmitter.emit('start');"
		 
** Sync e Async **
  - Forma síncrona: O código espera ser totalmente executado para prosseguir.
	- Forma assíncrona: O código continua progredindo, e em um ponto futuro obtém a resposta da execução assíncrona.
	
** Módulo http **
  - Podemos criar um servidor HTTP com ele, ou seja, receber uma requisição e receber um código HTML como resposta.
	- Método createServer para criar um servidor e método listen para determinar a porta.
	+ Para criar um servidor básico:
	  "const http = require('http');
		 const port = 3000;
		 
		 const server = http.createServer((req, res) => {
		 		res.write('ola, meu nome é Martin e eu tenho 23 anos');
		 		res.end();
		 });
		 
		 server.listen(port, () => {
		 		console.log(`Servidor rodando na porta ${port}`);
		 });"
	- Este servidor acima, deve ser primeiro executado com o Node para ser colocado no ar. Após isso, é aberto o navegador e acessado http://localhost:3000/, ou então o número da porta que foi definido ao invés de 3000.
	- Dentro do texto que está em res.write, também podemos colocar Tags HTML (Não é o certo).
	+ Devemos fazer assim no nosso createServer se quisermos retornar HTML:
	  "const server = http.createServer((req, res) => {
		 		res.statusCode = 200;
		 		res.setHeader('Content-Type', 'text/html');
		 		res.end('<h1>Hello World! Segunda vez!!</h1>');
		 });"
		 
** Módulo url **
  - Serve para decompor uma URL que passamos para o método parse.
	- Podemos resgatar host, path, search, query, protocol, etc.

** Usando http e url juntas **
  - No exemplo abaixo, usamos http e url juntas para fazer uma simples tela que, se o name é enviado, ele mostra a mensagem de bem-vindo, se não é enviado, solicita a pessoa a escrever seu nome e enviar, e ai sim acessa o seja bem-vindo.
	"const http = require('http');
   const port = 3001;
   
   const server = http.createServer((req, res) => {
       const urlInfo = require(`url`).parse(req.url, true);
   
       const name = urlInfo.query.name;
   
       res.statusCode = 200;
       res.setHeader('Content-Type', 'text/html');
   
       if(!name) {
           res.end(`<h1>Preencha seu nome:</h1><form method="GET"><input type="text" name="name"/><input type="submit" value="Enviar"/></form>`);
       } else {
           res.end(`<h1>Seja bem vindo ${name}!</h1>`);
       }
   });
   
   server.listen(port, () => {
       console.log(`Servidor rodando na porta ${port}`);
   });"
	 
** Rotas com Node Puro **
  - Rotas são basicamente as páginas que acessamos nos sites.
	
** Módulo path **
  - Conseguimos extrair informações sobre caminhos e arquivos.
	- Nome do diretório, nome do arquivo, extensão do arquivo, etc.
	
** Expess **
  - Um framework para Node.
	- Serve para criarmos aplicações Web.
	- Podemos criar rotas, renderizar HTML, conectar a um banco de dados, etc.
	- Torna a criação de Apps muito mais simples.
	
** Rotas **
  - Basicamente são URLs que acessamos.
	- Se criarmos uma rota por exemplo /produtos, podemos acessar através da URL www.nossosite.com/produtos.
	- Quando o usuário acessar, podemos carregar diversos dados como carregar os produtos do banco de dados.
	- São uma ponte entre o usuário e a lógica da aplicação.
	
** Salvar arquivo do servidor e já reiniciar o projeto **
  - Usamos o módulo Nodemon como dependência de desenvolvimento no nosso projeto.
	- Toda vez que salvarmos o arquivo do servidor, ele já irá atualizar os dados em tempo real.
	+ Temos que criar um script de start dentro da package.json com o seguinte comando e ai chamamos ele no terminal com npm start:
	  "nodemon $NOME ARQUIVO$ localhost $PORTA$"
		
** Middleware **
  - São códigos que podem ser executados entre uma ação e outra.
	- Por exemplo, verificar se o usuário está logado.
	- Método que podemos usar para usarmos middleware é o use do Express.
	
** Template Engine **
  - Forma de deixar o HTML dinâmico, inserindo variáveis do back-end no front-end.
	- Podemos criar layouts para serem reaproveitados.
	- Essencial para projetos com banco de dados, pois não são estáticos.
	- Exemplos: EJS, Pug e Handlebars.
	
** Handlebars **
  - Uma das templates engines mais utilizadas.
	- Colocamos os dados dinâmicos no HTML entre {{}} para serem impressos em tela.
	- Podemos criar condicionais e loops.
	- Sintaxe limpa no front.
	- O pacote se chama express-handlebars.

** MySQL **
  + Conectar no MySQL com o usuário root (só podemos fazer isso enquanto o xampp estiver aberto e com o MySQL com start):
	  "mysql -u root"
	- Para conectar o MySQL ao Node:
	  + Instalar o driver:
		  "npm install mysql"
			
** Connection Pool **
  - Recurso para otimizar conexões, criando um cache e permitindo a sua reutilização.
	- Este recurso também controla as conexões abertas, fechando assim que se tornam inativas.