** TypeScript **
  - Define tipo de dados na vari√°vel.
	- POO √© muito melhor que no JS.

** Angular **
  - Framework para front-end para criar aplica√ß√µes SPA (single-page applications).
  - Usa TypeScript como linguagem principal e √© baseado em componentes.
  
  - Para iniciar um projeto Angular:
    + Instalar o Angular no computador se n√£o tiver:
      "npm install -g @angular/cli"
    + Criar um novo app:
      "ng new $NOME APP$"
    + Entrar na pasta do projeto criada:
      "cd $NOME APP$"
    + Iniciar o servidor:
      "ng serve"
      
  - Estruturas de um projeto Angular:
    - src/app/: Cont√©m os componentes principais do app.
    - app.module.ts: Define os m√≥dulos e depend√™ncias.
    - app.component.ts: O componente principal do app.
    
  - Componentes:
    - Tudo √© baseado em componentes.
    - Um componente √© composto por tr√™s arquivos: HTML (interface), CSS (estilo) e TS (l√≥gica).
    + Para criar um novo componente:
      "ng generate component $NOME COMPONENTE$"
      
  - Templates e Data Binding:
    - Interpola√ß√£o: {{$VARI√ÅVEL$}} exibe vari√°veis no HTML.
    - Property Binding: [$ATRIBUTO$] passa valores para elementos.
      "@Component({
         selector: 'app-root',
         styleUrls: ['app.component.css'],
         template: `
           <div [contentEditable]="isEditable"></div>
         `,
       })
       export class AppComponent {
         isEditable = false;
       }"
    - Event Binding: ($EVENTO$) captura eventos, como cliques.
      "@Component({
         selector: 'app-root',
         template: `
           <section (mouseover)="onMouseOver()" (mouseout)="onMouseOut()">
             There's a secret message for you, hover to reveal üëÄ
             {{ message }}
           </section>
         `,
       })
       export class AppComponent {
         message = '';
       
         onMouseOver() {
           this.message = 'Way to go üöÄ';
         }
       
         onMouseOut() {
           this.message = '';
         }
       }"
    
  - Diretivas e Pipes:
    - Diretivas Estruturais: *ngIf, *ngFor, primeiro √© um IF e o segundo √© um LOOP (Usado nas vers√µes antes da v16).
    - Pipes: date, uppercase, currency, para formata√ß√£o de dados.
    
  - Servi√ßos de Inje√ß√£o e Depend√™ncia:
    - Para comunica√ß√£o entre componentes e acesso a APIs.
    - Fazer requisi√ß√µes HTTP com HttpClientModule.
    + Criar um servi√ßo:
      "ng generate service $NOME SERVICO$"
      
  - Roteamento:
    + Adicionar suporte a rotas.
      "ng generate module app-routing --flat"
    - Configure as rotas em app-routing.module.ts.
    
  - Angular Template String (s√≥ funciona do Angular v16 para cima)
    - @if: faz um if
      "@if (isLoggedIn) {}"
    - @else: faz o else do if
      "@else {}"
    - @for: faz o loop sobre alguma vari√°vel, por exemplo, um array de objetos
      "@for (user of users; track user.id) {}"